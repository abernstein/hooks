#!/usr/bin/php -q
#
# Installation:
# Add the following line to .git/hooks/post-checkout
#    php -f .git/hooks/php-bravo-minification.hook beta
#
<?php

// Get the args
$targetPath  = "/tmp/minification/";
$environment = (isset($argv[1]))?$argv[1]:'production';
$tag = (isset($argv[2]))?$argv[2]:null;

// validate that two args passed in
if (!($environment == 'production' || $environment == 'beta')) {
    echo "usage: git [environment=production|beta]\n\n";
    die();
}

`sudo -p "Build process requires sudo access. Enter sudo password:" echo ""`;

//get latest tag from tag list if one was not provided
if (is_null($tag)) {
  // Get the tag list
  $taglist = `git tag`;

  if (strlen($taglist) == 0) {
      echo "\n";
      die();
  }

  //get a list of all tags that match X.X.X.X
  if (preg_match_all('/\d+.\d+.\d+.\d+/', $taglist, $tags)) {
    $tags = $tags[0];
    //perform natural sort to make sure 2.10 is > 2.2
    usort($tags, 'strnatcmp');
    //get the most recent tag
    $tags = array_reverse($tags);
    $tag = $tags[0];
  }
  //no tag was provided and we could not find one
  if (is_null($tag)) {
    echo "Could not locate a valid X.X.X.X tag in the current repo.\n\n";
    die();
  }
}
echo "**** BUILDING <$environment> TAG <$tag> TO $targetPath ****\n";

echo "Accessing the repo...\n";

$workingdir = realpath('.');

if (!is_dir($targetPath))
    `mkdir $targetPath -p`;
$targetPath = realpath($targetPath);

file_put_contents($workingdir."/VERSION", $tag);

define('APPLICATION_ENV',$environment);
define('APPLICATION_PATH',$workingdir.'/application/');

add_include_path($workingdir.'/library/');

include($workingdir."/library/Bravo/Minifier.php");
include($workingdir."/library/Zend/Config/Ini.php");

echo "Project Build...\n";
$minifier = new Bravo_Minifier(false);
$minifier->fullCompile($tag, $targetPath);

`zip assets $targetPath/$tag/*`;
`mv assets.zip /www/public`;
`cp $targetPath/$tag/main.image.png /www/public/images`;

echo "Cleaning up...\n";
chdir('/');
`rm -rf /www/fteweb.cache/image/*`;
`rm -rf $targetPath/$tag`;
echo "\n";

function add_include_path ($path)
{
    foreach (func_get_args() AS $path)
    {
        if (!file_exists($path) OR (file_exists($path) && filetype($path) !== 'dir'))
        {
            trigger_error("Include path '{$path}' not exists", E_USER_WARNING);
            continue;
        }
        
        $paths = explode(PATH_SEPARATOR, get_include_path());
        
        if (array_search($path, $paths) === false)
            array_push($paths, $path);
        
        set_include_path(implode(PATH_SEPARATOR, $paths));
    }
}

function __autoload($class) {
    
    $fullPath = $fullPath1 = realpath(APPLICATION_PATH . '/../library').'/'.str_replace('_', DIRECTORY_SEPARATOR, $class).'.php';
    if (!is_file($fullPath1))
    {
        $fullPath = $fullPath2 = APPLICATION_PATH.'/'.str_replace('_', DIRECTORY_SEPARATOR, $class).'.php';
        if (!is_file($fullPath2))
        {
            return false;
        }
    }
    include_once($fullPath);
    return true;
}
