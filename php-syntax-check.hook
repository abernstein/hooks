#!/bin/bash

git diff --cached --name-status --diff-filter=ACMR | while read STATUS FILE; do
if [[ "$FILE" =~ ^.+(php|inc|phtml)$ ]]; then
    DIR=$(git rev-parse --show-toplevel)

    # Auto-Run Composer
    if [ -e "$DIR/composer.json" ]; then
      if [ -d "$DIR/vendor" ]; then
        composer.phar install
      else
        composer.phar update
      fi
    fi

    # Lint the File for Syntax Errors
    php -l "$FILE" 1> /dev/null
    if [ $? -ne 0 ]; then
        echo "Aborting commit due to files with syntax errors" >&2
        exit 1
    fi

    # Clean up code syntax
    # Suppresses PEAR deprecated errors
    FILEPATH=$(dirname "$FILE")
    php_beautifier -s2 -l "Pear() zfish() NewLines(after=T_DOC_COMMENT)" \
      -f "$FILE" -o "$FILEPATH"  2>/dev/null

    # Check against Coding Standards
    TMPSTANDARDS=$(mktemp)
    # -n --report=summary|checkstyle --report-file=<FILE>
    phpcs --standard=Pegasus --report-file="$TMPSTANDARDS" -n "$FILE"
    # the report file always contains at least \n so the size is never 0
    # SIZE=$(stat -c%s "$TMPSTANDARDS")
    if [ $? -gt 0 ]; then
      echo -e "PHPCS: Coding Standards Violations\n"
      cat $TMPSTANDARDS
    fi
    rm $TMPSTANDARDS

    if [[ "$FILE" =~ test ]]; then
      TMPUNIT=$(mktemp)
      # Run Against Unitest
      sudo phpunit --stderr --bootstrap "$DIR"/tests/application/bootstrap.php \
      "$FILE" > $TMPUNIT 2>&1
      if [ $? -gt 0 ]; then
        echo -e "PHPUNIT: Unit Test Violations\n ${TMPUNIT}"
        cat $TMPUNIT
        exit 1
      fi
      rm $TMPUNIT
    fi
fi
done
[ $? -ne 0 ] && exit 1
exit 0
