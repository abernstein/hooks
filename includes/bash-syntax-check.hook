#!/bin/bash

# External requirements:
#
#    * Git
#    * sed
#
#    Adjust LINTFLAGS as appropriate

# Redirect output to stderr.
exec 1>&2

TMPDIR=${TMPDIR:-'/tmp'}
TMPFILE=$(mktemp "${TMPDIR}"/tmp.XXXXXXXXXX)
STATUS=0

# Register exit trap for removing temporary files
trap 'rm -rf $TMPFILE' EXIT INT HUP

# Check for bash
which bash >/dev/null 2>&1 || exit 1

# Get correct git revision
if git rev-parse --quiet --verify HEAD > /dev/null; then
  revision=HEAD
else
  # Initial commit: diff against an empty tree object
  revision=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi
IFS="
    "

# Get a list of files changed in this transaction
declare -a FILES
FILES=$(git diff --cached --name-only --diff-filter=ACM "${revision}")

for file in ${FILES[@]}
do
# Don't check empty files
  if [[ $(git cat-file -s ":0:${file}") -eq 0 ]]; then
    continue
  fi
  extension="${file##*.}"
  git cat-file blob ":0:${file}" > $TMPFILE
  if [[ $? -ne 0 ]]; then
    echo "Unable to checkout ${file}"
    STATUS=2
  else
    head -n 1 "${file}" | grep 'bash' | grep '^#!/' > /dev/null
    if [ "$?" -eq 0 ] ; then
      # Remove import lines while parsing
      # Bash syntax check
      bash -n $TMPFILE >/dev/null 2>&1
      if [[ $? -ne 0 ]]; then
        echo "Bash syntax error in ${file}. Run 'bash -n ${file}'" >&2
        STATUS=2
      fi
    fi
  fi
done

echo -e $STATUS;

exit $STATUS
